React 기본적인 성능잡기

1. JS코딩 관습 : 익명 함수, 오브젝트 지양 >> 익명함수 같은것들도 되도록 변수로 선언해서 사용 (이름을 붙인 함수를 쓰거나)
                                        >> 오브젝트의 경우는 주로 리액트 style 어트리뷰트 사용할 때 그냥 오브젝트로 지정하게 되므로 주의 마찬가지로 되도록 변수 선언...

   이렇게 변수를 선언해주는 편이 좋은 이유는 메모리 할당 문제임
   익명함수로 처리한 콜백함수나 변수에 선언되지 않은 오브젝트 등은 사이트가 재랜더링 되거나 해당 함수나 오브젝트를 사용할 때마다 매번 새롭게 메모리에 할당이 됨


2. CSS 애니메이션 관습 : Layout 랜더링 단계의 요소(margin, width, position좌표, padding 등)을 변경하는 것은 지양할 것
                        >> 가능한 Composite 랜더링 단계의 transform(rotate, translate, scale, skew(기울기))이나 opacity를 변경하는 애니메이션을 사용하자


3. JS 파일에서 import된 파일들을 미리 로드함 >> 일반적인 케이스지만 import된 컴포넌트 파일들이 많거나 사이즈가 크면 페이지 로딩 속도에 악영향
   >> Router 이동 등으로 실제 그 페이지를 방문할 때나 필요한 경우 그때 import시키도록 lazy loading처리가 가능

   import { lazy, Suspense } from 'react'

   import 컴포넌트명 from '경로'로 처리했던 것을

   const 컴포넌트명 = lazy(() => { return import('경로')}); or lazy(_=>import('경로')); es6문법에서 return이 하나 일때는 return과 중괄호가 세트로 생략이 가능
   
   이후 해당 컴포넌트를 사용하는 곳에서

   <Suspense fallback={<div> 혹은 컴포넌트}> // fallback은 반드시 필요한건 아님, 로딩까지 보여줄 HTML을 입력하는 것
    <컴포넌트>
   </Suspense>
   
    >> 근데 스무스한 동작, SPA을 이용한 웹앱을 위한 리액트이기도 한데 lazy loading이라...

   cf)import('경로')이건 es6 다이나믹 import문법


4. React Dev Tools 크롬 확장 프로그램 (페북에서 공식으로 만든거) 간단 사용법
(https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ko) 

앱 추가 후 마우스 오른쪽 클릭+검사(ctrl shift i) 후 크롬 개발자 도구에서 'Components 항목'이 생긴 걸 확인
기본 Elements에서는 HTML로 치환된 상태를 보는 반면,

컴포넌트에서는 실제 제작한 컴포넌트 기준으로 디버깅 가능 + 컴포넌트가 전달받은 props들도 확인 가능(redux로 전달받은 store도)
기본 크롬 개발자 도구처럼 수정도 해볼 수 있음
+
또한 컴포넌트 선택시 알람 시계 모양의 Suspend (매달다, 걸다 >> 유예하다, 중단하다)를 동작하면,
개발 환경에서는 보기힘든 <Suspend> 태그의 페이지 로딩 상태에서의 HTML 상태도 확인 가능하다

그리고 'Profiler 항목'의 경우는 컴포넌트 랜더링 속도를 측정하고 단계를 녹화해주는 기능
파란원(start profiling) 버튼 클릭 후 컴포넌트 랜더링 들을 시킨 뒤에 다시 빨간 원(stop profiling)을 눌러주면 측정된 로딩, 재랜더링된 컴포넌트를 전부 표시해 준다.

>> 너무 랜더링이 오래걸리는 컴포넌트나 쓸데없이 재랜더링이 되는 컴포넌트들을 찾을 수 있음
>> 참고로 세팅의 Profiler에서 랜더링 되는 이유를 출력하게 처리할 수도 있다.


5. memo

만약

<Parent name="Chin" age="29 />

const Parent = (props) => {
    <Child1 name={props.name} />
    <Child2 age={props.age} />
}

const Child1 = (props) => {
    useEffect(_ => {console.log("Child1랜더링");}
    return <div>props.name</div>
}

const Child2 = (props) => {
    useEffect(_ => {console.log("Child2랜더링");}
    return <div>props.age</div>
}

이런 관계의 컴포넌트가 짜여졌을때,
<Parent>로 전달되는 props 중 name이 바뀐다면 useEffect로 인해 콘솔에 Child1랜더링 뿐 아니라 Child2랜더링도 로그에 남게 된다.
이는 Parent의 props가 변경되어 업데이트(업데이트 조건 : state나 props 변경) 되면서 해당 데이터를 사용하는 하위 컴포넌트 Child1 뿐 아니라 사용하지 않는 Child2까지 모두 재랜더링함

memo(memorize)는 이런 상황에서 props 변경이 되지 않은 컴포넌트의 재랜더링을 막기 위한 기능

import {memo} from 'react';
한뒤 위의 Child2를

const Child2 = memo(() => {
    useEffect(() => {console.log('Child2랜더링')});
    return <div>props.age</div>
});

이런 식으로 memo 함수의 콜백으로 JSX를 정의한 뒤 이를 변수로 선언해서 사용한다.

참고로 확인할때 개발자 모드로 확인하거나 변경용 이벤트 버튼을 만들어야 한다. 코드를 직접 변경하는건 확인이 안된다.

문제는 기존 props와의 비교연산을 처리한 후 컴포넌트를 업데이트할지 결정함 >> 따라서 체크할 props가 커지면 오히려 업데이트가 느려진다.
>> 상위 컴포넌트 변경으로 재랜더링될 하위 컴포넌트의 사이즈가 클 때 고려해보면 좋다. 