// 5/3 : 라우터 추가기능 (hashmode, guards) 정리를 위한 파일
// txt로 우선 저장 볼 때는 .js로 다시
// 당근 main.js에 등록을 안 시켰기에 그냥 개념 정리용 파일로 생각

// 1. HTML5 mode와 Hash mode

import { createRouter, createWebHistory } from 'vue-router';

const routes = [];
const router = createRouter({
    history: createWebHistory(),
    routes,
})

// 위와 같은 초기 상태가 HTML5 mode 만약 router의 설정 중 createWebHistory()에 문제가 생기면 아래와 같은 Hash mode를 사용한다

import { createRouter, createWebHashHistory } from 'vue-router'; // HashHistory임

const routes = [];
const router = createRouter({
    history: createWebHashHistory(), // 얘도 위랑 달리 HashHistory
    routes,
})

// 이렇게 createWebHashHistory() 설정을 통한 Hash mode에서는 url 라우터 이동시 모두 #이 붙은 상태로 시작한다 (codingapple.com/#/detail)

/* 두 모두의 차이 >> URL에서 # 뒤에 있는 내용들은 절대 서버로 전달되지 않음 (그래서 href 속성만 일단 적을 때 #쓰는거군...)
   원래 url에 /xxx라고 입력하는 건 서버에 /xxx페이지를 요청하는 행위다 (router는 이를 가로채어 페이지를 이동시켜준다)
   
   HTML5모드 >> #이 붙지 않음 >> Vue가 라우팅을 하기 전에 서버처리를 시도할 수가 있음 그럼 당연히 서버에 해당 기능이 없을때 404에러가 뜬다

   Hash 모드 >> #이 붙기에 서버가 역으로 라우팅을 채가는 일 없이 온전히 Vue에 라우팅을 맡기게 됨 (그래서 서버가 없는 경우 Hash모드가 나을 수 있음)
*/

/* 2. Navigation guards
   
   SPA(Single Page App) : 모던 웹 패러다임 >> Native앱(그냥 우리가 생각하는 앱)과 유사한 UX 제공
                        : 초기에 모든 리소스를 받아 안에서 동작하며 필요시에만 부분적으로 서버에 요청 >> Web App의 핵심 / 구동은 느려도 이후 네트워크 비용과 속도가 매우 좋음
                        : 대신 기존 Web 서버에 비해 초기구동속도 + SEO(검색엔진최적화)가 문제

   Routing : 출발지에서 목적지까지 경로를 결정하는 것 : (Web기준) 화면사이 전환을 위한 네비게이션(경로안내) 기능
   기존 anchor에 경우 서버로 해당 페이지 요청 + ajax로 데이터를 서버로부터 수신시 화면을 생성하는 경우도 url이 변경되지 않음

   암튼 이런 상황에서 Navigation guards는 말 그대로 페이지 이동 사이 뭔가 검사,보호 같은 코드처리를 하는것
   Navigation guards : 특정 URL접속시 네비게이션을 해주기 전 실행 할 수 있는 코드 / Lifecycle의 hook과 비슷한 개념
                     : 예를 들어 마이페이지에 접속 시 라우팅 전 로그인을 확인해주는 코드를 실행시키게 하는 것
*/

const route = [
    path: "/hello",
    component: HelloWorld,
    beforeEnter: () => {    // 위 path로 들어가기 전 검사를 하기 위해서는 beforeEnter로 arrow function처리
        if (loginStatus == false) { // 보통 쿠키나 로컬스토리지에 있는 로그인 정보 확인
            return '/login' // 경우에 따라 이동할 라우팅 경로가 있음 여기서 그 route를 return해주면 된다
        }
    } // 보안적으로 JS변수, 데이터는 콘솔 코드 입력으로 위변조가 가능하기에 로그인 등의 문제는 당연히 서버에서도 체크를 해줘야한다.
]

const route = [
    path: "/hello",
    component: HelloWorld,
    beforeEnter: (to, from) => { // Navigation guards 익명함수의 파라미터는 최대 2개(to(목적지), from(출발지)) 까지
        return to.fullPath // 사용방법은 $route처럼 해당 페이지 라우트 정보를 쓸 수 있음 (즉, .fullPath나 .params.파라미터 같이)
    }
]
// 만약 페이지 이동없이 그냥 라우팅을 중단시킬 경우 return false / return이 없으면 기존 라우팅 경로로 이동해버림

const router = createRouter({})
router.beforeEach((to, from) => {

})
// 만약 여러 route에 동일한 navigation guards를 실행시키고 싶다면 위처럼 router설정 변수에다 함수를 실행해주면 됨
// 라우팅 전 실행 : beforeEach(), beforeResolve() / 라우팅 후 실행 : afterEach()

/* Vue 컴포넌트 안에 Navigation guards 쓸 때 : 특정 페이지 접속 시 ajax 요청하거나 뭔가 확인하는 등
   
   >> 이 경우 beforeRouteEnter(to, from){}, beforeRouteUpdate(to, from){} 이 함수들을 lifecycle hooking함수 쓰는 위치에다 작성하면 된다

*/


export default routerplus