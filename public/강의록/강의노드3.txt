스타일링 라이브러리

1. styled-components (css in js)

>> 컴포넌트 파일이 많아 CSS를 짜는데 곤란해질때 + class 중복이 곤란할 때
>> css + 컴포넌트를 합침 (말그대로 css를 미리 입힌 스타일드 컴포넌트를 만듦)

설치 + 사용법 :
npm install styled-components

사용 컴포넌트에
import styled from 'styled-components'

를 한 후,

let 컴포넌트명 = styled.div`
    css 스타일들 입력
`;

let 컴포넌트명 =  styled.h4`
    css 스타일
`;

>> 이때 주의할 점은 일단 유사 컴포넌트더라도 컴포넌트이므로 대문자로 시작해야함 (그래야 라이브러리 먹힘)
>> 한글만 되서 왜그런가 싶었넼ㅋㅋㅋㅋ

등 해당 태그 종류에 맞게

이후 위 컴포넌트명으로 HTML 작성
물론 className 사용 가능하나 그냥 바로 <컴포넌트> 태그로 가도 됨


>> 호불호가 많이 갈림
>> css파일을 만들어 정리가 편하면 그쪽해도

>> 스타일명 관리가 편함 vs 컴포넌트가 너무 많아짐

++ styled-components의 props >> css를 js로 하게 되므로 ``사이 ${ 변수 }를 넣을 수 있게 된다.
   >> ${props => props.속성} 로 처리한다. >> 당연 props이므로 <컴포넌트 속성>으로 전달한다 / 속성 = {}로 데이터 바인딩 가능
   >> 주의할 점은 그냥 props.속성이 아니라 props=> props.속성 즉 콜백함수로 해야함


=======================================================================================================
=======================================================================================================

2. SASS (갠적으로 이쪽이 취향...)

>> SASS 설치 : npm install node-sass

>> SASS : CSS를 좀더 프로그래밍 언어스럽게 다루기 위한 Preprocessor(전처리기 : 프리컴파일러, 말그대로 입력데이터를 다른 프로그램에 대한 입력으로 사용되는 출력물로 만듦)
>> CSS에서 변수, 연산자, 함수, 상속 같은 것들을 사용할 수 있게 해줌
>> 브라우저는 CSS밖에 못 읽으므로 SASS를 다시 CSS로 컴파일 해주는 라이브러리가 필요(위에서 설치한 node-sass)

node-sass는 설치에러가 잘 나기에 아래 참조

node.js 14버전에서 에러가 발생할 경우
npm uninstall(= yarn remove) node-sass로 지운 뒤
npm install node-sass@4.14.1 로 4.14버전으로 설치

node.js 16버전 이상에서 문제터지는 경우
설치된 6버전 이상의 node-sass에서 문제 터질시 (15에서 만약 안되면 5.0.0 설치)
node_modules폴더, yarn.lock(혹은 package-lock.json)에서 내역 죄다(ctrl a) 삭제한 뒤 npm install로 모듈 폴더 재설치


일단 React에서 css 가져오는건 import '경로';만 하면 됨 (참고로 파일명 바꿀때는 F2)

=======================================================================================================

>>SASS 주요 문법

1$변수 = ~로
컬러나 수치 등 지정 가능

2@import 사용이 편함 (근데 이건 css랑 똑같음)

reset css 가져온다던가 >> (이건 경험이 만드는 거)
body {
    margin: 0;
}
div {
    box-sizing: border-box;
}
이런 것들이 보통 reset.css 안에 들어감

reset.scss등은 @import './_reset.scss';로  언더바_를 붙여서 import로만 쓰기 굳이 따로 컴파일 시키지 않음을 알릴 수 있음

☆이때 주의할 점!! 부트스트랩의 reboot.scss와 겹칠 수 있으므로
index.js의 부트스트랩 import를 최상단에 두자 (css는 아래로 갈 수록 우선순위가 높아지므로)

3 nesting 문법
기존 css에서는 div.container h4 {} div.container p {} 각기 따로 이런식으로 길어질 수 있음
하지만 sass에서는

div.container {
    h4 {

    }
    p {

    }
}

이렇게 좀더 직관적으로 짤 수가 있음


4 @extend (상속)을 이용해 유사한 UI를 여러개 효율적으로 만들 수 있음

.my-alert {

}

.my-alert-red {
    @extend .my-alert;
}

와 같이 base UI를 만든 뒤 상속 시킬 수 있음 (상속 클래스명 등은 위처러 -~로 관계를 알 수 있도록)


5 @mixin @include

>>  함수라고 표현은 하는데 좀더 풀어 쓰면
    $변수가 각 적용 항목의 세부를 변수로 저장했다면

    @mixin은 css 속성 목록을 저장할 수 있음

    @mixin 함수명 {
        background: #eee;
        padding: 20px;
        width: 500px;
    }
    이렇게 목록을 저장한 뒤

    .my-class {
        @include 함수명;
    }
    이렇게 가져와 사용할 수 있다.
