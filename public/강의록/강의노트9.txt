1. setState 비동기성

JS도 일반적인 코드들은 동기(sync, sychronous)처리를 하게 됨

쉽게 말해 싱글스레드 기준 차례를 기다려 앞의 프로세스가 끝나야 다음 프로세스가 실행처리한다.
코드에서도
console.log(1); console.log(2); 가 순차적으로 실행됨

하지만 Ajax 요청과 같은 비동기(async, asynchronous) 처리의 경우 본질은 병렬처리린 말이 있는 것처럼(마치 검색창 자동완성 기능이 Ajax로 처리되어 새로고침없이 따로 데이터 갱신이 되는 것처럼)
요청 처리 등이 보내져서 처리되는 동안 다른 작업이 이뤄질 수 있지만,

= 이는 이런 작업에 시간이 소요된다면 순차처리가 진행되지 않아 의도치 않은 버그가 생길 수 있다는 이야기다.

이런 비동기 방식 작업은 ajax, eventListener, setTimeout 등이 있고 이런 얘들은 아 뭐 그렇겠구나 하는데...

ex) console.log(1); axios.get(()=>{console.(2)}); console.log(3);을 하면
    물리적으로 보류가 되어 ajax요청이 콤마단위더라도 일단 콘솔에는 1,3,2 순서로 찍히게 된다.

문제는 React에서 useState()의 state 변경 함수들이 죄다 async 처리 함수다...

예를들 let[count, setCount] = useState(0) 와 let[check, setCheck] = useState(0) 이 있다고 칠때,
setCount(count++);
if(count < 3) {
    setCheck(check++);
}
를 하면 check가 2까지만 변경될 것 같지만, 병렬처리가 이뤄지기에 아직 count++되기 전에 count<3 조건을 넘어 check++가 동시에 이뤄져
check가 3까지 되는 예상치못한 결과가 발생할 수 있다.

그래서 state끼리의 순차변경을 할 때는 문제가 터질 수 있음

이럴때 처리하는 방법은

1. 위 두 state를 하나의 object형 state에 넣어서 처리하던가
2. count가 굳이 state로 둘 필요가 없는(변경시 HTML 재랜더링이 필요한 데이터가 아닐) 경우 그냥 let count로 해서 일반 변수에 넣어 처리해던가
3. useEffect를 이용한다.

useEffect(()=>{
    if(count < 3) {
        setCheck(check++)
    }
}, [count]);
로 하여 count가 업데이트 되고 난 뒤 이를 감지해서 update시 (componentDidUpdate) 동작하게 하면된다.

문제는 [count] 조건을 걸어도 첫 로드가(마운트) 될 때도 (componentDidMount) 일단 실행이 된다.
이런 경우 다음과 같은 방법 등을 통해 꼼수를 부려 update시만 해당 비동기 처리를 하게 할 수 있다.

const mounted = useRef(false);

useEffect(() => {
    if(!mounted.current) {
        mounted.current = true;
    } else if(count < 3) {
        setCheck(check++);
    }
}, [count]);

>> useRef() :

React에서 ref는 JS에서 getElementById나 querySeletor같은 DOM selector로 특정 DOM element를 선택할 때 사용하는 것
>> React 프로젝트에서도 특정 element크기를 가져오거나, 스크롤바 위치나 포커스 설정, 특정 DOM 작동하는 HTML5 Video 라이브러리, chart.js 등을 사용할 때 등

>> 클래스형 컴포넌트는 React.createRef | 함수형 컴포넌트는 useRef() Hook 함수를 사용한다.
https://react.vlpt.us/basic/10-useRef.html 에서 참조한 InputUseRef.js 파일을 참조

>> useRef 뿐 아니라 destructing의 사용처(오브젝트 요소 변수로 추출), 동적으로 key 선택하는 방법 확인

tip1) destructing : 
const { value, name } = e.target;

const [sampleInput, setSampleInput] = useState({
        name: '',
        nick: ''
    });
const { name, nick } = sampleInput처럼 key의 이름을 변수명으로 하여 값을 초기화가 짧게 가능함

tip2) key 이름을 동적으로 설정
const { value, name } = e.target;
const temp = { ...sampleInput, [name]: value }; 이런식으로 하면 sampleInput에 대한 deepCopy와 동시에,
target이 된 <input>의 name 어트리뷰트에 따라 동적으로 key가 업데이트된다.

다시 InputUseRef.js로 돌아가서 포커싱 같은 경우는 DOM element에 직접 접근을 해야하는 케이스이므로 ref를 사용한다.
const nameInputRef = useRef(); 와 같이 Ref객체를 생성해 초기화 해준 뒤
<input ref={nameInputRef}> 처럼 ref 어트리뷰트로 useRef()로 생성한 Ref객체를 걸어준다.

이후 nameInputRef.current 를 하여 해당 DOM element를 가리키게 해서 우리가 getElementById 등으로 쓰던 함수를 적용해주면된다.
포커싱을 할거면 nameInputRef.current.focus(); 이렇게

이런 DOM 요소 접근 뿐 아니라 useRef()는 위에 useEffect 꼼수 등에 사용하는 변수 값을 저장하는데 사용한다.

const mounted = useRef('intializedValue');
이렇게 useRef() 초기화시 파라미터로 들어간 데이터는 .current로 바로 조회 가능하며,
함수를 거치지 않고 mounted.current = ''; 처럼 바로 수정이 되고,
값이 변경되었다고 하여 리랜더링이 발생하지 않는다.

이런 useRef()를 사용한 데이터 저장은 다음과 같은 이유로 사용한다.
https://www.zerocho.com/category/React/post/5f9a7c8807be1d0004347311

1. useState와 달리 변경시마다 리랜더링이 발생하지 않는다.
2. 그냥 변수를 사용하는 경우의 2가지 문제를 커버하기 위해 사용한다.

let outerData = 0;
const Test = () => {
    let innerData = 0;

    return(<div onClick={outerData++;innerData++;}>click</div>)
};
export default Test;

outerData의 경우는 각 컴포넌트 인스턴스마다 값을 공유하기에 <Test/><Test/>처럼 여러곳에 사용된다면 클릭될 때마다 모두 공유된다. (물론 이것땜에 저걸 사용하기도 하지)

innerData의 경우 각 컴포넌트 인스턴스마다 고유 값을 갖지만, 업데이트에 의해 리랜더링이 발생하면 값이 다시 초기화가 일어난다.

마운트 된 컴포넌트가 언마운트 전까지 그 값이 유지된다.

예를들어 map에 의해 여러개 생성된 <Card/>들에 대해서 각 값이 공유되지 않고 동시에 언마운트까지 값이 유지되야 하는 데이터가 있다면 useRef()로 저장한다.


Tip 호이스팅 >> const ~ = () => {} 와 같은 함수 표현식은 호이스팅 되지 않음 (순차로 적어줘야 함)